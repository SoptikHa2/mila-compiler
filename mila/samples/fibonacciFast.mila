program fibonacciFast;

function fib(n: integer; maxMem: integer): integer;
var
    f, ftmp, nextAvOffset : integer;
begin
    if (n = 0) then begin
        fib := 0;
        exit;
    end;
    if (n <= 2) then begin
        fib := 1;
        exit;
    end;

    nextAvOffset := getSharedInt(0);
    setSharedInt(0, nextAvOffset+1);
    setSharedInt(nextAvOffset, -1);
    fib := -1;

    :ff;

    comeFrom ff;
    ftmp := fib(n-1, maxMem);
    if ftmp > -1 then
        setSharedInt(nextAvOffset, ftmp);
    exit;

    comeFrom ff;
    ftmp := fib(n-2, maxMem);
    while getSharedInt(nextAvOffset) = -1 do begin end;
    fib := ftmp + getSharedInt(nextAvOffset);
end;

const
    memSize = 30000;
var
    input, result: integer;
begin
    setupSharedInts(memSize);
    setSharedInt(0, 1);
    readln(input);
    result := fib(input, memSize);
    if result <> -1 then
        writeln(result);
end.